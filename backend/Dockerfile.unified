# ================================
# Unified Dockerfile for Backend & Worker
# Single build, multiple entry points
# ================================

# Build argument to determine entry point (backend or worker)
ARG SERVICE_TYPE=backend

# ================================
# Development Stage
# ================================
FROM node:22-alpine AS development

WORKDIR /app

# Install build dependencies for native modules in development too
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    vips-dev \
    fftw-dev

# Install dependencies
COPY package.json ./
RUN npm install

# Rebuild sharp specifically for Alpine Linux
RUN npm rebuild sharp --verbose

# Copy source code
COPY . .

# Default to backend in development (can be overridden in docker-compose)
CMD ["npm", "run", "start:dev"]

# ================================
# Build Stage (SHARED - runs only once!)
# ================================
FROM node:22-alpine AS build

WORKDIR /app

# Install build dependencies for native modules (sharp, bcrypt, etc.)
# vips-dev is required for sharp to work on Alpine
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    vips-dev \
    fftw-dev

# Copy package files
COPY package.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm install

# Rebuild sharp for Alpine Linux (musl libc)
RUN npm rebuild sharp --verbose

# Copy source code
COPY . .

# Build application (compiles BOTH main.ts AND worker.ts)
RUN npm run build

# List dist directory to verify build
RUN echo "ðŸ“¦ Build completed. Dist directory contents:" && \
    ls -lah dist/

# Remove dev dependencies
RUN npm prune --production

# ================================
# Production Base (SHARED)
# ================================
FROM node:22-alpine AS production-base

WORKDIR /app

# Install runtime dependencies for sharp (vips)
RUN apk add --no-cache vips

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Copy built application and production dependencies (ONCE!)
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /app/package.json ./package.json

# Create all necessary directories
RUN mkdir -p /tmp/app /app/temp/media /app/logs && \
    chown -R nestjs:nodejs /tmp/app /app/temp /app/logs

# Switch to non-root user
USER nestjs

# ================================
# Backend Production
# ================================
FROM production-base AS backend-production

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"

# Start backend API
CMD ["node", "dist/main.js"]

# ================================
# Worker Production
# ================================
FROM production-base AS worker-production

# Health check for worker
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD pgrep -f "node dist/worker" || exit 1

# Start worker
CMD ["node", "dist/worker.js"]

# ================================
# Final Stage Selector
# ================================
FROM ${SERVICE_TYPE}-production AS production

# This stage will be either backend-production or worker-production
# depending on the SERVICE_TYPE build arg
