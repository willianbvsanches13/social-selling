{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "PrometheusController_index",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Prometheus"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "Creates a new user account with email and password",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or email already exists"
          },
          "429": {
            "description": "Too many registration attempts"
          }
        },
        "summary": "Register a new user account",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Authenticates user and returns JWT access token, refresh token, and sets session cookie",
        "operationId": "AuthController_login",
        "parameters": [
          {
            "name": "user-agent",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "Too many login attempts"
          }
        },
        "summary": "Login with email and password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "description": "Generates a new access token using a valid refresh token",
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "description": "Invalidates refresh token and clears session cookie",
        "operationId": "AuthController_logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged out successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "description": "Returns the profile of the authenticated user",
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sessions": {
      "get": {
        "description": "Returns list of all active sessions for the authenticated user",
        "operationId": "AuthController_getUserSessions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Sessions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing session"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get user sessions",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sessions/{sessionId}": {
      "delete": {
        "description": "Revokes a specific session by ID",
        "operationId": "AuthController_revokeSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "Session ID to revoke",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session revoked successfully"
          },
          "401": {
            "description": "Unauthorized - Session not found or does not belong to user"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Revoke a session",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/users/me": {
      "get": {
        "operationId": "UserController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "User Management"
        ]
      },
      "patch": {
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update current user profile",
        "tags": [
          "User Management"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteAccount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Account deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete user account (soft delete)",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/me/change-password": {
      "post": {
        "operationId": "UserController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Bad request - passwords do not match or do not meet requirements"
          },
          "401": {
            "description": "Unauthorized or invalid current password"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change user password",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/verify-email": {
      "post": {
        "operationId": "UserController_sendVerificationEmail",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification email sent successfully"
          },
          "400": {
            "description": "Email already verified"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send email verification link",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/verify-email/{token}": {
      "get": {
        "operationId": "UserController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify email with token",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/me/stats": {
      "get": {
        "operationId": "UserController_getUserStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User statistics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user statistics",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/instagram/oauth/authorize": {
      "get": {
        "operationId": "InstagramController_initiateOAuth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorizationUrl": {
                      "type": "string",
                      "example": "https://api.instagram.com/oauth/authorize?..."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initiate Instagram OAuth flow",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/oauth/callback": {
      "get": {
        "operationId": "InstagramController_handleOAuthCallback",
        "parameters": [
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Authorization code from Instagram",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "CSRF state token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "required": false,
            "in": "query",
            "description": "Error code if user denied access",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to frontend"
          }
        },
        "summary": "Handle Instagram OAuth callback",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/accounts/{id}/sync": {
      "post": {
        "operationId": "InstagramAccountController_syncAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Sync account metadata from Instagram",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}/disconnect": {
      "delete": {
        "operationId": "InstagramController_disconnectAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account disconnected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Instagram account disconnected successfully"
                    },
                    "accountId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disconnect Instagram account",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/system/accounts": {
      "get": {
        "description": "Lists all Instagram Business Accounts accessible via the system user token",
        "operationId": "InstagramController_listAvailableAccounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of available Instagram Business Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableAccountsResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "System user token not configured or API error"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List available Instagram Business Accounts",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/system/accounts/{id}": {
      "get": {
        "description": "Retrieves detailed information about a specific Instagram Business Account",
        "operationId": "InstagramController_getAccountDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Instagram Business Account ID",
            "schema": {
              "example": "17841405309211844",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instagram Business Account details"
          },
          "404": {
            "description": "Account not found or not accessible"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Instagram Business Account details",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/system/accounts/link": {
      "post": {
        "description": "Links an Instagram Business Account to the authenticated user as a client account",
        "operationId": "InstagramController_linkInstagramAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInstagramAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account linked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Instagram Business Account ID or already linked"
          },
          "404": {
            "description": "Instagram Business Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Link Instagram Business Account to client",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/accounts": {
      "get": {
        "operationId": "InstagramAccountController_listAccounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List all connected Instagram accounts",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}": {
      "get": {
        "operationId": "InstagramAccountController_getAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get single account by ID",
        "tags": [
          "Instagram Account Management"
        ]
      },
      "patch": {
        "operationId": "InstagramAccountController_updateAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update account information",
        "tags": [
          "Instagram Account Management"
        ]
      },
      "delete": {
        "operationId": "InstagramAccountController_deleteAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account disconnected successfully"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disconnect Instagram account",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}/refresh-status": {
      "post": {
        "operationId": "InstagramAccountController_refreshStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountStatusResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Refresh account status (check token validity)",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/webhooks/subscriptions": {
      "post": {
        "operationId": "InstagramWebhooksController_createSubscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create webhook subscription for Instagram account",
        "tags": [
          "Instagram Webhooks"
        ]
      }
    },
    "/api/instagram/webhooks/events/{accountId}": {
      "get": {
        "operationId": "InstagramWebhooksController_getEvents",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventType",
            "required": false,
            "in": "query",
            "description": "Filter by event type (comment, mention, message, story_mention, live_comment)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Filter by processed status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Results per page (default: 50)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved successfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get webhook events for an Instagram account",
        "tags": [
          "Instagram Webhooks"
        ]
      }
    },
    "/api/instagram/webhooks/stats/{accountId}": {
      "get": {
        "operationId": "InstagramWebhooksController_getStats",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get webhook statistics for an Instagram account",
        "tags": [
          "Instagram Webhooks"
        ]
      }
    },
    "/api/instagram/webhooks/retry/{accountId}": {
      "post": {
        "operationId": "InstagramWebhooksController_retryFailedEvents",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events queued for retry"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retry failed webhook events",
        "tags": [
          "Instagram Webhooks"
        ]
      }
    },
    "/api/instagram/analytics/account/insights": {
      "post": {
        "operationId": "InstagramAnalyticsController_fetchAccountInsights",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAccountInsightsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insights fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInsightsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch and store account insights",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/account/{clientAccountId}": {
      "get": {
        "operationId": "InstagramAnalyticsController_getAccountInsights",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountInsightsResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get account insights history",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/media/{clientAccountId}": {
      "post": {
        "operationId": "InstagramAnalyticsController_fetchMediaInsights",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediaId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media insights fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaInsightsResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch media insights",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/media/top/{clientAccountId}": {
      "get": {
        "operationId": "InstagramAnalyticsController_getTopPosts",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metric",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "since",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopPostsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get top performing posts",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/audience/{clientAccountId}": {
      "get": {
        "operationId": "InstagramAnalyticsController_getAudienceDemographics",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audience data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudienceDemographicsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get audience demographics",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/reports": {
      "post": {
        "operationId": "InstagramAnalyticsController_generateReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate analytics report",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/analytics/reports/{clientAccountId}": {
      "get": {
        "operationId": "InstagramAnalyticsController_listReports",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reports retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticsReportResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List analytics reports",
        "tags": [
          "Instagram Analytics"
        ]
      }
    },
    "/api/instagram/scheduling/test-publish/{postId}": {
      "post": {
        "operationId": "InstagramSchedulingController_testPublish",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "description": "Scheduled post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test publish result with detailed logs"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test publish a scheduled post (DEBUG)",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/posts": {
      "post": {
        "operationId": "InstagramSchedulingController_createScheduledPost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduledPostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post scheduled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledPostResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create scheduled post",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/posts/{accountId}": {
      "get": {
        "operationId": "InstagramSchedulingController_listScheduledPosts",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Client account ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "scheduled",
                "publishing",
                "published",
                "failed",
                "cancelled"
              ]
            }
          },
          {
            "name": "scheduledAfter",
            "required": false,
            "in": "query",
            "description": "Get posts scheduled after this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheduledBefore",
            "required": false,
            "in": "query",
            "description": "Get posts scheduled before this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedScheduledPostsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List scheduled posts",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/posts/{accountId}/{postId}": {
      "get": {
        "operationId": "InstagramSchedulingController_getScheduledPost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "description": "Scheduled post ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Client account ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Post retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledPostResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get scheduled post by ID",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/posts/{postId}": {
      "put": {
        "operationId": "InstagramSchedulingController_updateScheduledPost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "description": "Scheduled post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledPostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledPostResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Cannot update non-scheduled posts"
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update scheduled post",
        "tags": [
          "Instagram Scheduling"
        ]
      },
      "delete": {
        "operationId": "InstagramSchedulingController_cancelScheduledPost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "description": "Scheduled post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelScheduledPostResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel scheduled post",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/posts/{postId}/publish-now": {
      "post": {
        "operationId": "InstagramSchedulingController_publishNow",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "description": "Scheduled post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishNowResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish scheduled post immediately",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/publish": {
      "post": {
        "operationId": "InstagramSchedulingController_publishInstantly",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduledPostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishNowResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish post immediately without scheduling",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/media/upload": {
      "post": {
        "operationId": "InstagramSchedulingController_uploadMedia",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Media uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload media file",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/media/{accountId}": {
      "get": {
        "operationId": "InstagramSchedulingController_listMedia",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Client account ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "mediaType",
            "required": false,
            "in": "query",
            "description": "Filter by media type",
            "schema": {
              "type": "string",
              "enum": [
                "image",
                "video"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media assets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaAssetsListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List media assets",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/media/{accountId}/{assetId}": {
      "get": {
        "operationId": "InstagramSchedulingController_getMediaAsset",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Media asset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Client account ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Media asset retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaUploadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Media asset not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get media asset details",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/media/{assetId}": {
      "delete": {
        "operationId": "InstagramSchedulingController_deleteMediaAsset",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Media asset ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media asset deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMediaAssetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete media in use"
          },
          "404": {
            "description": "Media asset not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete media asset",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/instagram/scheduling/optimal-times/{accountId}": {
      "get": {
        "operationId": "InstagramSchedulingController_getOptimalTimes",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Client account ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Optimal times retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimalPostingTimesResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get optimal posting times",
        "tags": [
          "Instagram Scheduling"
        ]
      }
    },
    "/api/posts/upload": {
      "post": {
        "operationId": "PostsController_uploadMedia",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Media uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload media file for post",
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/calendar": {
      "get": {
        "operationId": "PostsController_getCalendarPosts",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Start date in ISO format (e.g., 2025-10-01)",
            "schema": {
              "example": "2025-10-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "End date in ISO format (e.g., 2025-11-30)",
            "schema": {
              "example": "2025-11-30",
              "type": "string"
            }
          },
          {
            "name": "clientAccountId",
            "required": false,
            "in": "query",
            "description": "Filter by client account ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledPostResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get posts for calendar view",
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/messaging/conversations": {
      "get": {
        "description": "Retrieves a paginated list of conversations for a client account with optional filters",
        "operationId": "MessagingController_listConversations",
        "parameters": [
          {
            "name": "clientAccountId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "archived"
              ]
            }
          },
          {
            "name": "hasUnread",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Client account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List conversations",
        "tags": [
          "Messaging"
        ]
      }
    },
    "/api/messaging/conversations/{id}": {
      "get": {
        "description": "Retrieves detailed information about a specific conversation",
        "operationId": "MessagingController_getConversation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Conversation not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get conversation details",
        "tags": [
          "Messaging"
        ]
      }
    },
    "/api/messaging/conversations/{id}/messages": {
      "get": {
        "description": "Retrieves a paginated list of messages for a specific conversation",
        "operationId": "MessagingController_listMessages",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 100,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Conversation not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List messages in conversation",
        "tags": [
          "Messaging"
        ]
      },
      "post": {
        "description": "Sends a text message to a participant in a conversation via Instagram",
        "operationId": "MessagingController_sendMessage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid message or 24-hour response window has expired"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Conversation not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a message",
        "tags": [
          "Messaging"
        ]
      }
    },
    "/api/messaging/conversations/{id}/read": {
      "patch": {
        "description": "Marks all unread messages in a conversation as read",
        "operationId": "MessagingController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Conversation not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark conversation as read",
        "tags": [
          "Messaging"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/ready": {
      "get": {
        "operationId": "HealthController_readiness",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/live": {
      "get": {
        "operationId": "HealthController_liveness",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "Social Selling API",
    "description": "\n# Social Selling Platform API\n\nComplete REST API for Instagram-based social selling platform.\n\n## Features\n- Instagram OAuth integration\n- Product catalog management\n- Direct message automation\n- Post scheduling and analytics\n- Multi-account support\n\n## Authentication\nAll authenticated endpoints require a Bearer token in the Authorization header.\nObtain tokens via POST /api/auth/login endpoint.\n\n## Rate Limiting\n- Authenticated: 1000 requests/hour\n- Unauthenticated: 100 requests/hour\n\n## Session Management\nSessions are managed via HTTP-only cookies and can be tracked per device.\n  ",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and session management operations"
    },
    {
      "name": "Users",
      "description": "User profile and settings management"
    },
    {
      "name": "Products",
      "description": "Product catalog operations"
    },
    {
      "name": "Instagram",
      "description": "Instagram integration endpoints"
    },
    {
      "name": "Messages",
      "description": "Direct message management"
    },
    {
      "name": "Posts",
      "description": "Post scheduling and publishing"
    },
    {
      "name": "Analytics",
      "description": "Analytics and insights"
    },
    {
      "name": "Health",
      "description": "Application health and readiness checks"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Local Development"
    },
    {
      "url": "https://staging-api.socialselling.willianbvsanches.com",
      "description": "Staging Environment"
    },
    {
      "url": "https://api.socialselling.willianbvsanches.com",
      "description": "Production Environment"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "Authorization",
        "description": "Enter JWT access token",
        "in": "header"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "ssell_session",
        "description": "Session cookie for authenticated requests"
      }
    },
    "schemas": {
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "description": "User information",
            "example": {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "email": "demo@socialselling.com",
              "name": "Demo User",
              "emailVerified": true
            }
          },
          "accessToken": {
            "type": "string",
            "description": "JWT access token (expires in 15 minutes)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJlbWFpbCI6ImRlbW9Ac29jaWFsc2VsbGluZy5jb20iLCJpYXQiOjE2MzU0NDMyMDAsImV4cCI6MTYzNTQ0NDA5MH0.abcdef123456"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token (expires in 7 days)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTYzNTQ0MzIwMCwiZXhwIjoxNjM2MDQ4MDAwfQ.xyz789"
          },
          "expiresIn": {
            "type": "number",
            "description": "Access token expiration time in seconds",
            "example": 900
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID (used for session management)",
            "example": "session-123-abc"
          }
        },
        "required": [
          "user",
          "accessToken",
          "refreshToken",
          "expiresIn"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters, must include uppercase, lowercase, and number)",
            "example": "SecurePass123!",
            "minLength": 8,
            "maxLength": 100,
            "format": "password"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 100
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "demo@socialselling.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters)",
            "example": "DemoPass123!",
            "minLength": 8,
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTYzNTQ0MzIwMCwiZXhwIjoxNjM2MDQ4MDAwfQ.xyz789"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "João Silva",
            "description": "User full name"
          },
          "timezone": {
            "type": "string",
            "example": "America/Sao_Paulo",
            "description": "User timezone"
          },
          "language": {
            "type": "string",
            "example": "pt-BR",
            "description": "User preferred language",
            "enum": [
              "pt-BR",
              "en-US",
              "es-ES"
            ]
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "OldPass123!",
            "description": "Current password"
          },
          "newPassword": {
            "type": "string",
            "example": "NewPass456!",
            "description": "New password (min 8 chars, uppercase, lowercase, number)"
          },
          "confirmPassword": {
            "type": "string",
            "example": "NewPass456!",
            "description": "Confirm new password"
          }
        },
        "required": [
          "currentPassword",
          "newPassword",
          "confirmPassword"
        ]
      },
      "InstagramBusinessAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Instagram Business Account ID",
            "example": "17841405309211844"
          },
          "username": {
            "type": "string",
            "description": "Instagram username",
            "example": "my_business_account"
          },
          "name": {
            "type": "string",
            "description": "Account display name",
            "example": "My Business"
          },
          "profile_picture_url": {
            "type": "string",
            "description": "Profile picture URL"
          },
          "followers_count": {
            "type": "number",
            "description": "Number of followers",
            "example": 1500
          },
          "follows_count": {
            "type": "number",
            "description": "Number of accounts following",
            "example": 300
          },
          "media_count": {
            "type": "number",
            "description": "Number of media posts",
            "example": 125
          },
          "biography": {
            "type": "string",
            "description": "Account biography"
          },
          "website": {
            "type": "string",
            "description": "Website URL"
          },
          "facebookPageId": {
            "type": "string",
            "description": "Connected Facebook Page ID",
            "example": "123456789012345"
          },
          "facebookPageName": {
            "type": "string",
            "description": "Connected Facebook Page Name",
            "example": "My Business Page"
          }
        },
        "required": [
          "id",
          "username",
          "facebookPageId",
          "facebookPageName"
        ]
      },
      "AvailableAccountsResponseDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of available Instagram Business Accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstagramBusinessAccountDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of accounts",
            "example": 3
          }
        },
        "required": [
          "accounts",
          "total"
        ]
      },
      "LinkInstagramAccountDto": {
        "type": "object",
        "properties": {
          "instagramBusinessAccountId": {
            "type": "string",
            "description": "Instagram Business Account ID to link",
            "example": "17841405309211844"
          },
          "facebookPageId": {
            "type": "string",
            "description": "Optional: Facebook Page ID (for verification)",
            "example": "123456789012345"
          }
        },
        "required": [
          "instagramBusinessAccountId"
        ]
      },
      "LinkAccountResponseDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Client account ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "username": {
            "type": "string",
            "description": "Instagram username",
            "example": "my_business_account"
          },
          "instagramBusinessAccountId": {
            "type": "string",
            "description": "Instagram Business Account ID",
            "example": "17841405309211844"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Instagram Business Account linked successfully"
          }
        },
        "required": [
          "accountId",
          "username",
          "instagramBusinessAccountId",
          "message"
        ]
      },
      "AccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account UUID"
          },
          "platform": {
            "type": "string",
            "description": "Platform name",
            "example": "instagram"
          },
          "username": {
            "type": "string",
            "description": "Instagram username"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Profile picture URL"
          },
          "followerCount": {
            "type": "number",
            "description": "Follower count"
          },
          "followingCount": {
            "type": "number",
            "description": "Following count"
          },
          "mediaCount": {
            "type": "number",
            "description": "Media count"
          },
          "biography": {
            "type": "string",
            "description": "Biography"
          },
          "website": {
            "type": "string",
            "description": "Website URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ],
            "description": "Account status"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "personal",
              "business",
              "creator"
            ],
            "description": "Account type"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "lastSyncAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last sync timestamp"
          },
          "tokenExpiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Token expiration timestamp"
          }
        },
        "required": [
          "id",
          "platform",
          "username",
          "status",
          "accountType",
          "createdAt"
        ]
      },
      "AccountListResponseDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "Array of connected accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of accounts"
          }
        },
        "required": [
          "accounts",
          "total"
        ]
      },
      "UpdateAccountDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ]
          }
        }
      },
      "AccountStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ],
            "description": "Account status"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateWebhookSubscriptionDto": {
        "type": "object",
        "properties": {
          "instagramAccountId": {
            "type": "string",
            "description": "Instagram account ID"
          },
          "subscriptionFields": {
            "type": "array",
            "description": "Subscription fields",
            "items": {
              "type": "string",
              "enum": [
                "messages",
                "comments",
                "mentions",
                "story_insights",
                "live_comments"
              ]
            }
          },
          "verifyToken": {
            "type": "string",
            "description": "Custom verify token (auto-generated if not provided)"
          }
        },
        "required": [
          "instagramAccountId",
          "subscriptionFields"
        ]
      },
      "WebhookStatsDto": {
        "type": "object",
        "properties": {
          "totalEvents": {
            "type": "number"
          },
          "processedEvents": {
            "type": "number"
          },
          "pendingEvents": {
            "type": "number"
          },
          "failedEvents": {
            "type": "number"
          },
          "duplicateEvents": {
            "type": "number"
          },
          "eventsByType": {
            "type": "object"
          }
        },
        "required": [
          "totalEvents",
          "processedEvents",
          "pendingEvents",
          "failedEvents",
          "duplicateEvents",
          "eventsByType"
        ]
      },
      "GetAccountInsightsDto": {
        "type": "object",
        "properties": {
          "clientAccountId": {
            "type": "string",
            "description": "Client account ID"
          },
          "period": {
            "type": "string",
            "description": "Insight period",
            "enum": [
              "day",
              "week",
              "days_28"
            ]
          },
          "since": {
            "type": "string",
            "description": "Start date (ISO 8601)"
          },
          "until": {
            "type": "string",
            "description": "End date (ISO 8601)"
          }
        },
        "required": [
          "clientAccountId",
          "period"
        ]
      },
      "AccountInsightsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "followerCount": {
            "type": "number"
          },
          "followerChange": {
            "type": "number"
          },
          "reach": {
            "type": "number"
          },
          "impressions": {
            "type": "number"
          },
          "profileViews": {
            "type": "number"
          },
          "websiteClicks": {
            "type": "number"
          },
          "postsCount": {
            "type": "number"
          },
          "storiesCount": {
            "type": "number"
          },
          "audienceCity": {
            "type": "object"
          },
          "audienceCountry": {
            "type": "object"
          },
          "audienceGenderAge": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "date",
          "period",
          "followerCount",
          "followerChange",
          "reach",
          "impressions",
          "profileViews",
          "websiteClicks",
          "postsCount",
          "storiesCount",
          "audienceCity",
          "audienceCountry",
          "audienceGenderAge",
          "createdAt",
          "updatedAt"
        ]
      },
      "MediaInsightsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mediaIgId": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "permalink": {
            "type": "string"
          },
          "caption": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "likeCount": {
            "type": "number"
          },
          "commentCount": {
            "type": "number"
          },
          "saved": {
            "type": "number"
          },
          "shares": {
            "type": "number"
          },
          "reach": {
            "type": "number"
          },
          "impressions": {
            "type": "number"
          },
          "engagementRate": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "mediaIgId",
          "mediaType",
          "permalink",
          "caption",
          "timestamp",
          "likeCount",
          "commentCount",
          "saved",
          "shares",
          "reach",
          "impressions",
          "engagementRate",
          "createdAt",
          "updatedAt"
        ]
      },
      "TopPostsResponseDto": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metric": {
            "type": "string"
          },
          "period": {
            "type": "object"
          }
        },
        "required": [
          "posts",
          "metric",
          "period"
        ]
      },
      "AudienceDemographicsDto": {
        "type": "object",
        "properties": {
          "city": {
            "type": "object"
          },
          "country": {
            "type": "object"
          },
          "genderAge": {
            "type": "object"
          },
          "locale": {
            "type": "object"
          },
          "onlineFollowers": {
            "type": "object"
          }
        },
        "required": [
          "city",
          "country",
          "genderAge",
          "locale",
          "onlineFollowers"
        ]
      },
      "GenerateReportDto": {
        "type": "object",
        "properties": {
          "clientAccountId": {
            "type": "string",
            "description": "Client account ID"
          },
          "reportType": {
            "type": "string",
            "description": "Report type",
            "enum": [
              "overview",
              "content",
              "audience",
              "engagement"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Start date (ISO 8601)"
          },
          "endDate": {
            "type": "string",
            "description": "End date (ISO 8601)"
          }
        },
        "required": [
          "clientAccountId",
          "reportType",
          "startDate",
          "endDate"
        ]
      },
      "AnalyticsReportResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reportType": {
            "type": "string",
            "enum": [
              "overview",
              "content",
              "audience",
              "engagement"
            ]
          },
          "period": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "summary": {
            "type": "object"
          },
          "chartsData": {
            "type": "object"
          },
          "topPosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "insights": {
            "type": "object"
          },
          "generatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "reportType",
          "period",
          "startDate",
          "endDate",
          "summary",
          "chartsData",
          "topPosts",
          "insights",
          "generatedAt"
        ]
      },
      "ProductTagDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "x": {
            "type": "number",
            "description": "X coordinate (0-1)"
          },
          "y": {
            "type": "number",
            "description": "Y coordinate (0-1)"
          }
        },
        "required": [
          "productId",
          "x",
          "y"
        ]
      },
      "CreateScheduledPostDto": {
        "type": "object",
        "properties": {
          "clientAccountId": {
            "type": "string",
            "description": "Client account ID"
          },
          "scheduledFor": {
            "type": "string",
            "description": "Scheduled publish time (ISO 8601)"
          },
          "caption": {
            "type": "string",
            "description": "Post caption"
          },
          "mediaUrls": {
            "description": "Media URLs (uploaded to S3)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mediaType": {
            "type": "string",
            "description": "Media type",
            "enum": [
              "IMAGE",
              "VIDEO",
              "CAROUSEL",
              "REELS",
              "STORIES"
            ]
          },
          "productTags": {
            "description": "Product tags for shopping posts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTagDto"
            }
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID to use"
          },
          "templateVariables": {
            "type": "object",
            "description": "Template variables"
          }
        },
        "required": [
          "clientAccountId",
          "scheduledFor",
          "caption",
          "mediaUrls",
          "mediaType"
        ]
      },
      "ScheduledPostResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientAccountId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "scheduledFor": {
            "format": "date-time",
            "type": "string"
          },
          "publishedAt": {
            "format": "date-time",
            "type": "string"
          },
          "caption": {
            "type": "string"
          },
          "mediaUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mediaType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "VIDEO",
              "CAROUSEL",
              "REELS",
              "STORIES"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "scheduled",
              "publishing",
              "published",
              "failed",
              "cancelled"
            ]
          },
          "publishAttempts": {
            "type": "number"
          },
          "lastPublishError": {
            "type": "string"
          },
          "instagramMediaId": {
            "type": "string"
          },
          "permalink": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "cancelledAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "clientAccountId",
          "userId",
          "scheduledFor",
          "caption",
          "mediaUrls",
          "mediaType",
          "status",
          "publishAttempts",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginatedScheduledPostsResponseDto": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledPostResponseDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "posts",
          "total",
          "page",
          "limit"
        ]
      },
      "UpdateScheduledPostDto": {
        "type": "object",
        "properties": {
          "scheduledFor": {
            "type": "string",
            "description": "Scheduled publish time"
          },
          "caption": {
            "type": "string",
            "description": "Post caption"
          },
          "mediaUrls": {
            "description": "Media URLs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productTags": {
            "description": "Product tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTagDto"
            }
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      },
      "CancelScheduledPostResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "scheduledPostId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "scheduledPostId",
          "status"
        ]
      },
      "PublishNowResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "scheduledPostId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "scheduledPostId",
          "status"
        ]
      },
      "MediaUploadResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "originalFilename": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "fileSize": {
            "type": "number"
          },
          "mediaType": {
            "type": "string"
          },
          "s3Url": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "filename",
          "originalFilename",
          "mimeType",
          "fileSize",
          "mediaType",
          "s3Url",
          "createdAt"
        ]
      },
      "MediaAssetsListResponseDto": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaUploadResponseDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "assets",
          "total",
          "page",
          "limit"
        ]
      },
      "DeleteMediaAssetResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "mediaId": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "mediaId"
        ]
      },
      "PostingScheduleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientAccountId": {
            "type": "string"
          },
          "dayOfWeek": {
            "type": "number",
            "description": "Day of week (0-6, where 0 is Sunday)",
            "minimum": 0,
            "maximum": 6
          },
          "timeSlots": {
            "description": "Time slots in HH:MM format",
            "example": [
              "09:00",
              "14:00",
              "20:00"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string"
          },
          "isOptimal": {
            "type": "boolean",
            "description": "Whether this is an optimal time based on analytics"
          },
          "engagementScore": {
            "type": "number",
            "description": "Engagement score for this time slot (0-100)",
            "minimum": 0,
            "maximum": 100
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "clientAccountId",
          "dayOfWeek",
          "timeSlots",
          "timezone",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "OptimalTimeSlotDto": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "number",
            "description": "Day of week (0-6, where 0 is Sunday)"
          },
          "hour": {
            "type": "number",
            "description": "Hour of day (0-23)"
          },
          "averageEngagement": {
            "type": "number",
            "description": "Average engagement score (0-100)"
          },
          "sampleSize": {
            "type": "number",
            "description": "Number of posts sampled"
          }
        },
        "required": [
          "dayOfWeek",
          "hour",
          "averageEngagement",
          "sampleSize"
        ]
      },
      "OptimalPostingTimesResponseDto": {
        "type": "object",
        "properties": {
          "schedules": {
            "description": "Posting schedules for each day of week",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostingScheduleDto"
            }
          },
          "recommendations": {
            "description": "Top 5 optimal posting times based on historical engagement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptimalTimeSlotDto"
            }
          },
          "timezone": {
            "type": "string",
            "description": "User timezone"
          },
          "postsAnalyzed": {
            "type": "number",
            "description": "Number of posts analyzed"
          },
          "analysisPeriodDays": {
            "type": "number",
            "description": "Time period analyzed (in days)"
          }
        },
        "required": [
          "schedules",
          "recommendations",
          "timezone",
          "postsAnalyzed",
          "analysisPeriodDays"
        ]
      },
      "ConversationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientAccountId": {
            "type": "string"
          },
          "platformConversationId": {
            "type": "string"
          },
          "participantPlatformId": {
            "type": "string"
          },
          "participantUsername": {
            "type": "string"
          },
          "participantProfilePic": {
            "type": "string"
          },
          "lastMessageAt": {
            "format": "date-time",
            "type": "string"
          },
          "unreadCount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed",
              "archived"
            ]
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "clientAccountId",
          "platformConversationId",
          "participantPlatformId",
          "unreadCount",
          "status",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "ConversationListResponseDto": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationResponseDto"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          }
        },
        "required": [
          "conversations",
          "total",
          "limit",
          "offset"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "conversationId": {
            "type": "string"
          },
          "platformMessageId": {
            "type": "string"
          },
          "senderType": {
            "type": "string",
            "enum": [
              "user",
              "customer"
            ]
          },
          "senderPlatformId": {
            "type": "string"
          },
          "messageType": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "video",
              "audio",
              "story_mention",
              "story_reply"
            ]
          },
          "content": {
            "type": "string"
          },
          "mediaUrl": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string"
          },
          "readAt": {
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "conversationId",
          "platformMessageId",
          "senderType",
          "messageType",
          "isRead",
          "sentAt",
          "metadata",
          "createdAt"
        ]
      },
      "MessageListResponseDto": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageResponseDto"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          }
        },
        "required": [
          "messages",
          "total",
          "limit",
          "offset"
        ]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          }
        },
        "required": [
          "text"
        ]
      }
    }
  }
}