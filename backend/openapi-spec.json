{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "Creates a new user account with email and password",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or email already exists"
          },
          "429": {
            "description": "Too many registration attempts"
          }
        },
        "summary": "Register a new user account",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Authenticates user and returns JWT access token, refresh token, and sets session cookie",
        "operationId": "AuthController_login",
        "parameters": [
          {
            "name": "user-agent",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "Too many login attempts"
          }
        },
        "summary": "Login with email and password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "description": "Generates a new access token using a valid refresh token",
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "description": "Invalidates refresh token and clears session cookie",
        "operationId": "AuthController_logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged out successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "description": "Returns the profile of the authenticated user",
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sessions": {
      "get": {
        "description": "Returns list of all active sessions for the authenticated user",
        "operationId": "AuthController_getUserSessions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Sessions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing session"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get user sessions",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sessions/{sessionId}": {
      "delete": {
        "description": "Revokes a specific session by ID",
        "operationId": "AuthController_revokeSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "Session ID to revoke",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session revoked successfully"
          },
          "401": {
            "description": "Unauthorized - Session not found or does not belong to user"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Revoke a session",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/users/me": {
      "get": {
        "operationId": "UserController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "User Management"
        ]
      },
      "patch": {
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update current user profile",
        "tags": [
          "User Management"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteAccount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Account deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete user account (soft delete)",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/me/change-password": {
      "post": {
        "operationId": "UserController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Bad request - passwords do not match or do not meet requirements"
          },
          "401": {
            "description": "Unauthorized or invalid current password"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change user password",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/verify-email": {
      "post": {
        "operationId": "UserController_sendVerificationEmail",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification email sent successfully"
          },
          "400": {
            "description": "Email already verified"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send email verification link",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/verify-email/{token}": {
      "get": {
        "operationId": "UserController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify email with token",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/users/me/stats": {
      "get": {
        "operationId": "UserController_getUserStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User statistics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user statistics",
        "tags": [
          "User Management"
        ]
      }
    },
    "/api/instagram/oauth/authorize": {
      "get": {
        "operationId": "InstagramController_initiateOAuth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorizationUrl": {
                      "type": "string",
                      "example": "https://api.instagram.com/oauth/authorize?..."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initiate Instagram OAuth flow",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/oauth/callback": {
      "get": {
        "operationId": "InstagramController_handleOAuthCallback",
        "parameters": [
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Authorization code from Instagram",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "CSRF state token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "required": false,
            "in": "query",
            "description": "Error code if user denied access",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to frontend"
          }
        },
        "summary": "Handle Instagram OAuth callback",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/accounts/{id}/disconnect": {
      "delete": {
        "operationId": "InstagramController_disconnectAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account disconnected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Instagram account disconnected successfully"
                    },
                    "accountId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disconnect Instagram account",
        "tags": [
          "Instagram Integration"
        ]
      }
    },
    "/api/instagram/accounts": {
      "get": {
        "operationId": "InstagramAccountController_listAccounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List all connected Instagram accounts",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}": {
      "get": {
        "operationId": "InstagramAccountController_getAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get single account by ID",
        "tags": [
          "Instagram Account Management"
        ]
      },
      "patch": {
        "operationId": "InstagramAccountController_updateAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update account information",
        "tags": [
          "Instagram Account Management"
        ]
      },
      "delete": {
        "operationId": "InstagramAccountController_deleteAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account disconnected successfully"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disconnect Instagram account",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}/sync": {
      "post": {
        "operationId": "InstagramAccountController_syncAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Sync account metadata from Instagram",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/api/instagram/accounts/{id}/refresh-status": {
      "post": {
        "operationId": "InstagramAccountController_refreshStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountStatusResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Refresh account status (check token validity)",
        "tags": [
          "Instagram Account Management"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/ready": {
      "get": {
        "operationId": "HealthController_readiness",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/live": {
      "get": {
        "operationId": "HealthController_liveness",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "Social Selling API",
    "description": "\n# Social Selling Platform API\n\nComplete REST API for Instagram-based social selling platform.\n\n## Features\n- Instagram OAuth integration\n- Product catalog management\n- Direct message automation\n- Post scheduling and analytics\n- Multi-account support\n\n## Authentication\nAll authenticated endpoints require a Bearer token in the Authorization header.\nObtain tokens via POST /api/auth/login endpoint.\n\n## Rate Limiting\n- Authenticated: 1000 requests/hour\n- Unauthenticated: 100 requests/hour\n\n## Session Management\nSessions are managed via HTTP-only cookies and can be tracked per device.\n  ",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and session management operations"
    },
    {
      "name": "Users",
      "description": "User profile and settings management"
    },
    {
      "name": "Products",
      "description": "Product catalog operations"
    },
    {
      "name": "Instagram",
      "description": "Instagram integration endpoints"
    },
    {
      "name": "Messages",
      "description": "Direct message management"
    },
    {
      "name": "Posts",
      "description": "Post scheduling and publishing"
    },
    {
      "name": "Analytics",
      "description": "Analytics and insights"
    },
    {
      "name": "Health",
      "description": "Application health and readiness checks"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Local Development"
    },
    {
      "url": "https://staging-api.socialselling.willianbvsanches.com",
      "description": "Staging Environment"
    },
    {
      "url": "https://api.socialselling.willianbvsanches.com",
      "description": "Production Environment"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "Authorization",
        "description": "Enter JWT access token",
        "in": "header"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "ssell_session",
        "description": "Session cookie for authenticated requests"
      }
    },
    "schemas": {
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "description": "User information",
            "example": {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "email": "demo@socialselling.com",
              "name": "Demo User",
              "emailVerified": true
            }
          },
          "accessToken": {
            "type": "string",
            "description": "JWT access token (expires in 15 minutes)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJlbWFpbCI6ImRlbW9Ac29jaWFsc2VsbGluZy5jb20iLCJpYXQiOjE2MzU0NDMyMDAsImV4cCI6MTYzNTQ0NDA5MH0.abcdef123456"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token (expires in 7 days)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTYzNTQ0MzIwMCwiZXhwIjoxNjM2MDQ4MDAwfQ.xyz789"
          },
          "expiresIn": {
            "type": "number",
            "description": "Access token expiration time in seconds",
            "example": 900
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID (used for session management)",
            "example": "session-123-abc"
          }
        },
        "required": [
          "user",
          "accessToken",
          "refreshToken",
          "expiresIn"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters, must include uppercase, lowercase, and number)",
            "example": "SecurePass123!",
            "minLength": 8,
            "maxLength": 100,
            "format": "password"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 100
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "demo@socialselling.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters)",
            "example": "DemoPass123!",
            "minLength": 8,
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTYzNTQ0MzIwMCwiZXhwIjoxNjM2MDQ4MDAwfQ.xyz789"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "João Silva",
            "description": "User full name"
          },
          "timezone": {
            "type": "string",
            "example": "America/Sao_Paulo",
            "description": "User timezone"
          },
          "language": {
            "type": "string",
            "example": "pt-BR",
            "description": "User preferred language",
            "enum": [
              "pt-BR",
              "en-US",
              "es-ES"
            ]
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "OldPass123!",
            "description": "Current password"
          },
          "newPassword": {
            "type": "string",
            "example": "NewPass456!",
            "description": "New password (min 8 chars, uppercase, lowercase, number)"
          },
          "confirmPassword": {
            "type": "string",
            "example": "NewPass456!",
            "description": "Confirm new password"
          }
        },
        "required": [
          "currentPassword",
          "newPassword",
          "confirmPassword"
        ]
      },
      "AccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account UUID"
          },
          "platform": {
            "type": "string",
            "description": "Platform name",
            "example": "instagram"
          },
          "username": {
            "type": "string",
            "description": "Instagram username"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Profile picture URL"
          },
          "followerCount": {
            "type": "number",
            "description": "Follower count"
          },
          "followingCount": {
            "type": "number",
            "description": "Following count"
          },
          "mediaCount": {
            "type": "number",
            "description": "Media count"
          },
          "biography": {
            "type": "string",
            "description": "Biography"
          },
          "website": {
            "type": "string",
            "description": "Website URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ],
            "description": "Account status"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "personal",
              "business",
              "creator"
            ],
            "description": "Account type"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "lastSyncAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last sync timestamp"
          },
          "tokenExpiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Token expiration timestamp"
          }
        },
        "required": [
          "id",
          "platform",
          "username",
          "status",
          "accountType",
          "createdAt"
        ]
      },
      "AccountListResponseDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "Array of connected accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of accounts"
          }
        },
        "required": [
          "accounts",
          "total"
        ]
      },
      "UpdateAccountDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ]
          }
        }
      },
      "AccountStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "token_expired",
              "disconnected",
              "rate_limited",
              "error"
            ],
            "description": "Account status"
          }
        },
        "required": [
          "status"
        ]
      }
    }
  }
}