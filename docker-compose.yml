networks:
  social-selling-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  # prometheus-data:
  #   driver: local
  # grafana-data:
  #   driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: social-selling-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-social_selling}
      POSTGRES_USER: ${POSTGRES_USER:-social_selling_user}
      POSTGRES_PASSWORD: clgv5VdYpVXSCtEL1pVtvVpNnLtF0d5CDLJS5xwcS9Q=
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    # networks:
    #   - social-selling-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-social_selling_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache & Queue Backend
  redis:
    image: redis:7-alpine
    container_name: social-selling-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly no
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    # networks:
    #   - social-selling-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: social-selling-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_ENDPOINT:-http://localhost:9001}
    volumes:
      - minio-data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    # networks:
    #   - social-selling-network
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # # Nginx Reverse Proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: social-selling-nginx
  #   restart: unless-stopped
  #   volumes:
  #     - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
  #     - ./infrastructure/certbot/conf:/etc/letsencrypt:ro
  #     - ./infrastructure/certbot/www:/var/www/certbot:ro
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - social-selling-network
  #   depends_on:
  #     - frontend
  #     - backend
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 128M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 64M

  # # Backend API (NestJS)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: ${NODE_ENV:-development}
  #   container_name: social-selling-backend
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-development}
  #     PORT: 4000
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #     REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
  #     JWT_SECRET: ${JWT_SECRET}
  #     JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
  #     JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
  #     JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
  #     INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
  #     INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
  #     INSTAGRAM_REDIRECT_URI: ${INSTAGRAM_REDIRECT_URI}
  #     INSTAGRAM_WEBHOOK_VERIFY_TOKEN: ${INSTAGRAM_WEBHOOK_VERIFY_TOKEN}
  #     MINIO_ENDPOINT: http://minio:9000
  #     MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
  #     MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
  #     MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   ports:
  #     - "${BACKEND_PORT:-4000}:4000"
  #   networks:
  #     - social-selling-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
  #     interval: 15s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 30s
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.75'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M

  # # Frontend (Next.js)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: ${NODE_ENV:-development}
  #   container_name: social-selling-frontend
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-development}
  #     NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost/api}
  #     NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost/socket.io}
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #   ports:
  #     - "${FRONTEND_PORT:-3000}:3000"
  #   networks:
  #     - social-selling-network
  #   depends_on:
  #     - backend
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
  #     interval: 15s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 30s
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M

  # # Background Worker (BullMQ)
  # worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.worker
  #   container_name: social-selling-worker
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-production}
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #     REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
  #     WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
  #     INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
  #     INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
  #     MINIO_ENDPOINT: http://minio:9000
  #     MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
  #     MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
  #     MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   networks:
  #     - social-selling-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M

  # # Prometheus (Metrics)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: social-selling-prometheus
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--storage.tsdb.retention.time=30d'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   volumes:
  #     - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - ./infrastructure/monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
  #     - prometheus-data:/prometheus
  #   ports:
  #     - "${PROMETHEUS_PORT:-9090}:9090"
  #   networks:
  #     - social-selling-network
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #     interval: 15s
  #     timeout: 5s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 256M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 128M

  # # Grafana (Dashboards)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: social-selling-grafana
  #   restart: unless-stopped
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
  #     GF_INSTALL_PLUGINS: ''
  #     GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
  #   volumes:
  #     - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
  #     - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
  #     - grafana-data:/var/lib/grafana
  #   ports:
  #     - "${GRAFANA_PORT:-3001}:3000"
  #   networks:
  #     - social-selling-network
  #   depends_on:
  #     - prometheus
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
  #     interval: 15s
  #     timeout: 5s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 256M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 128M
